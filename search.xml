<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[js-module-1.md]]></title>
      <url>/2017/09/19/js-module-1-md/</url>
      <content type="html"><![CDATA[<h1 id="常用JS库"><a href="#常用JS库" class="headerlink" title="常用JS库"></a>常用JS库</h1><p><a href="http://vincentgarreau.com/particles.js/" target="_blank" rel="external"><strong>Particles.js </strong></a>— 一个用来在 web 中创建炫酷的浮动粒子的库</p>
<p><a href="https://threejs.org/" target="_blank" rel="external"><strong>Three.js</strong></a> — 一个用来在 web 中创建 3d 物体和 3d 空间的库</p>
<p><a href="https://alvarotrigo.com/fullPage/#firstPage" target="_blank" rel="external"><strong>Fullpage.js</strong></a>— 快速实现全屏滚动特性</p>
<p><a href="http://www.mattboldt.com/demos/typed-js/" target="_blank" rel="external"><strong>Typed.js</strong></a> — 打字机效果</p>
<p><a href="http://imakewebthings.com/waypoints/" target="_blank" rel="external"><strong>Waypoints.js </strong></a>— 滚动到某个元素位置时触发一个功能</p>
<p><a href="https://highlightjs.org/" target="_blank" rel="external"><strong>Highlight.js</strong> </a>— web 语法高亮</p>
<p><a href="http://www.chartjs.org/" target="_blank" rel="external"><strong>Chart.js</strong></a> — 使用 JavaScript 创建漂亮的图表</p>
<p><a href="http://instantclick.io/" target="_blank" rel="external"><strong>Instantclick</strong></a> — 能够明显加速网站加载时间，鼠标 hover 时预加载资源</p>
<p><a href="http://gionkunz.github.io/chartist-js/index.html" target="_blank" rel="external"><strong>Chartist</strong></a> — 另一个图表库</p>
<p><a href="http://darsa.in/motio/#!introduction" target="_blank" rel="external"><strong>Motio </strong></a>— 一个基于动画和平移的雪碧图库</p>
<p><a href="http://git.blivesta.com/animsition/" target="_blank" rel="external"><strong>Animsition</strong></a> — CSS 实现动画过渡的 jQuery 插件</p>
<p><a href="https://github.com/luruke/barba.js" target="_blank" rel="external"><strong>Barba.js</strong></a> — 流式页面过渡</p>
<p><a href="http://zurb.com/playground/twentytwenty" target="_blank" rel="external"><strong>TwentyTwenty </strong></a>— 一个对比图片的可视化 diff 工具</p>
<p><a href="https://github.com/maxwellito/vivus#vivusjs" target="_blank" rel="external"><strong>Vivus.js</strong></a> — 在 SVG 上绘制动画</p>
<p><a href="http://mynameismatthieu.com/WOW/" target="_blank" rel="external"><strong>Wow.js</strong> </a>— 滚动时展现动画</p>
<p><a href="https://github.com/anthonyly/Scrolline.js" target="_blank" rel="external"><strong>Scrolline.js</strong></a> — 页面滚动时显示滚动进度</p>
<p><a href="http://velocityjs.org/" target="_blank" rel="external"><strong>Velocity.js</strong></a> — 快速流畅的 JavaScript 动画</p>
<p><a href="http://michalsnik.github.io/aos/" target="_blank" rel="external"><strong>Animate on scroll</strong></a> — 漂亮的页面滚动元素动画</p>
<p><a href="http://handlebarsjs.com/" target="_blank" rel="external"><strong>Handlebars.js</strong></a> — Javascript 模板</p>
<p><a href="http://www.pixxelfactory.net/jInvertScroll/" target="_blank" rel="external"><strong>jInvertScroll</strong></a> — 视差滚动</p>
<p><a href="https://github.com/peachananr/onepage-scroll" target="_blank" rel="external"><strong>One page scroll</strong></a> — 又一个页面滚动库</p>
<p><a href="https://github.com/wagerfield/parallax" target="_blank" rel="external"><strong>Parallax.js</strong></a> — 对智能设备方向变化做出响应的视差引擎</p>
<p><a href="http://twitter.github.io/typeahead.js/" target="_blank" rel="external"><strong>Typeahead.js </strong></a>— 搜索补全</p>
<p><a href="http://skidding.github.io/dragdealer/" target="_blank" rel="external"><strong>Dragdealer.js</strong></a> — 炫酷拖拽</p>
<p><a href="http://bouncejs.com/" target="_blank" rel="external"><strong>Bounce.js </strong></a>— 创建炫酷的 CSS3 动画</p>
<p><a href="https://github.com/alvarotrigo/pagePiling.js" target="_blank" rel="external"><strong>Pagepiling.js</strong></a> — 全屏滚动</p>
<p><a href="https://github.com/alvarotrigo/multiscroll.js" target="_blank" rel="external"><strong>Multiscroll.js </strong></a>— 两列垂直反向滚动</p>
<p><a href="http://lab.ejci.net/favico.js/" target="_blank" rel="external"><strong>Favico.js</strong></a> — 动态 favicon</p>
<p><a href="http://aerolab.github.io/midnight.js/" target="_blank" rel="external"><strong>Midnight.js </strong></a>— 固定头部切换效果</p>
<p><a href="http://animejs.com/" target="_blank" rel="external"><strong>Anime.js </strong></a>— 动画库</p>
<p><a href="http://keycode.info/" target="_blank" rel="external"><strong>Keycode</strong></a> — 获取键盘按键的 JavaScript keycode</p>
<p><a href="http://rubaxa.github.io/Sortable/" target="_blank" rel="external"><strong>Sortable</strong></a> — 拖拽插件</p>
<p><a href="http://projects.sergiodinislopes.pt/flexdatalist/" target="_blank" rel="external"><strong>Flexdatalist </strong></a>— 自动补全</p>
<p><a href="https://slideout.js.org/" target="_blank" rel="external"><strong>Slideout.js </strong></a>— 移动应用侧滑导航</p>
<p><a href="http://jquerymy.com/#/" target="_blank" rel="external"><strong>Jquerymy</strong></a> — 使用 jQuery 实现双向数据绑定</p>
<p><a href="http://nosir.github.io/cleave.js/" target="_blank" rel="external"><strong>Cleave.js </strong></a>— 实时格式化输入内容</p>
<p><a href="http://smalljs.org/client-side-routing/page/" target="_blank" rel="external"><strong>Page</strong></a> — 客户端单页应用路由</p>
<p><a href="http://selectize.github.io/selectize.js/" target="_blank" rel="external"><strong>Selectize.js</strong></a> — 用来添加 tag 的 Hybrid 选择框</p>
<p><a href="http://hernansartorio.com/jquery-nice-select/" target="_blank" rel="external"><strong>Nice select </strong></a>— 创建漂亮的选择框的 jQuery 库</p>
<p><a href="http://tether.io/" target="_blank" rel="external"><strong>Tether</strong></a> — 使用固定定位来创建相关元素</p>
<p><a href="https://github.com/HubSpot/shepherd" target="_blank" rel="external"><strong>Shepherd.js </strong></a>— 为应用创建新手引导</p>
<p><a href="https://github.com/HubSpot/tooltip" target="_blank" rel="external"><strong>Tooltip</strong></a> — tooltip 提示框</p>
<p><a href="https://select2.github.io/" target="_blank" rel="external"><strong>Select2</strong></a> — Jquery 选择框插件</p>
<p><a href="http://izitoast.marcelodolce.com/" target="_blank" rel="external"><strong>IziToast</strong></a> — 通知弹窗实现</p>
<p><a href="http://izimodal.marcelodolce.com/" target="_blank" rel="external"><strong>IziModal </strong></a>— 模态框实现</p>
<h3 id="CSS-库-设计相关"><a href="#CSS-库-设计相关" class="headerlink" title="CSS 库 / 设计相关"></a>CSS 库 / 设计相关</h3><p><a href="https://daneden.github.io/animate.css/" target="_blank" rel="external"><strong>Animate.css</strong></a> — 动画库</p>
<p><a href="https://flatuicolors.com/" target="_blank" rel="external"><strong>Flat UI Colors </strong></a>— 扁平化设计配色</p>
<p><a href="https://getmdl.io/index.html" target="_blank" rel="external"><strong>Material design lite</strong></a>— 基于 Google material design 的框架</p>
<p><a href="https://www.webpagefx.com/web-design/random-color-picker/" target="_blank" rel="external"><strong>Colorrrs </strong></a>— 随机颜色生成器</p>
<p><a href="https://tympanus.net/Development/SectionSeparators/" target="_blank" rel="external"><strong>Section separators</strong></a> — CSS 实现区域分割</p>
<p><a href="http://topcoat.io/" target="_blank" rel="external"><strong>Topcoat</strong></a> — 框架</p>
<p><a href="https://www.kirupa.com/html5/ken_burns_effect_css.htm" target="_blank" rel="external"><strong>Create ken burns effect </strong></a>— 使用 CSS3 动画实现 Ken burns 特效</p>
<p><a href="http://www.vittoriozaccaria.net/dyn-css/" target="_blank" rel="external"><strong>DynCSS</strong></a> — 给 CSS 添加 function，动态化 CSS</p>
<p><a href="https://www.minimamente.com/example/magic_animations/" target="_blank" rel="external"><strong>Magic animations</strong></a> — CSS3 实现动画特效</p>
<p><a href="https://webkul.github.io/csspin/" target="_blank" rel="external"><strong>CSSpin</strong></a> — css spinners 合集</p>
<p><a href="https://feathericons.com/" target="_blank" rel="external"><strong>Feather icons</strong></a> — Icon 集合</p>
<p><a href="http://ionicons.com/" target="_blank" rel="external"><strong>Ion icons</strong></a> — Icon 集合</p>
<p><a href="http://fontawesome.io/" target="_blank" rel="external"><strong>Font awesome</strong></a> — Icon 集合</p>
<p><a href="http://brandmark.io/font-generator/" target="_blank" rel="external"><strong>Font generator</strong></a> — 组合多个字体创建混合字体</p>
<p><a href="https://proto.io/freebies/onoff/" target="_blank" rel="external"><strong>On/Off switch</strong></a> — 使用 CSS 创建 on/off 开关、radio 按钮</p>
<p><a href="https://getuikit.com/" target="_blank" rel="external"><strong>UI Kit</strong></a> — 框架</p>
<p><a href="http://getbootstrap.com/" target="_blank" rel="external"><strong>Bootstrap</strong></a> — 框架</p>
<p><a href="http://foundation.zurb.com/" target="_blank" rel="external"><strong>Foundation </strong></a>— 框架</p>
<h3 id="有用的产品-链接"><a href="#有用的产品-链接" class="headerlink" title="有用的产品/链接"></a>有用的产品/链接</h3><p><a href="https://github.com/joshbuchea/HEAD" target="_blank" rel="external"><strong>cheatsheet</strong></a> — 可以写在<head>中的所有标签</head></p>
<p><a href="https://ghost.org/" target="_blank" rel="external"><strong>Ghost </strong></a>— 基于 Node.js 的博客平台</p>
<p><a href="https://www.whatruns.com/" target="_blank" rel="external"><strong>What runs</strong></a> — 一个用于网站技术分析的 Chrome 插件</p>
<p><a href="https://learn-anything.xyz/learn-anything" target="_blank" rel="external"><strong>Learn anything </strong></a>— 一个强大的用于分析某个主题的思维导图</p>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[shell状态]]></title>
      <url>/2017/09/11/linux-base-1-md/</url>
      <content type="html"><![CDATA[<h2 id="login-shell-amp-no-login-shell"><a href="#login-shell-amp-no-login-shell" class="headerlink" title="login shell &amp; no-login shell"></a>login shell &amp; no-login shell</h2><ul>
<li>login shell <ul>
<li>当你通过终端输入用户名和密码，然后进入到terminal，这时候进入的shell环境就叫做是login shell，例如，通过ssh远程进入到主机。</li>
<li>login shell 运行的脚本文件 .bash_profile</li>
</ul>
</li>
<li>no-login shell<ul>
<li>例如你已经登陆了你的桌面电脑，这时候在应用管理器中找到termianl图标，然后双击打开终端</li>
<li>no-login shell 运行的脚本文件 .bashrc</li>
</ul>
</li>
<li>osx特例<ul>
<li>每次运行termianl的时候.默认运行login shell状态</li>
<li>osx 的环境变量都写在  .bash_profile</li>
</ul>
</li>
</ul>
<h2 id="bashrc-bash-profile-加载顺序"><a href="#bashrc-bash-profile-加载顺序" class="headerlink" title=".bashrc .bash_profile 加载顺序"></a>.bashrc .bash_profile 加载顺序</h2><ul>
<li>.bash_profile  .bashrc </li>
</ul>
]]></content>
      
        <categories>
            
            <category> osx </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git init 说明]]></title>
      <url>/2017/08/29/git-base-1/</url>
      <content type="html"><![CDATA[<h2 id="git-start"><a href="#git-start" class="headerlink" title="git start"></a>git start</h2><ul>
<li>git repository config</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git init</div><div class="line">git remote add origin https:<span class="comment">//xxx.xxx.xxx || git@git.xx.xxx</span></div><div class="line">git config user.name  xxx</div><div class="line">git config user.email xxx</div></pre></td></tr></table></figure>
<h2 id="start-description"><a href="#start-description" class="headerlink" title="start description"></a>start description</h2><ul>
<li>git config 说明<ul>
<li>remote add origin xxx 给本地仓库添加远程仓库 别名 origin</li>
<li>git 添加远程仓库https ssh 方式是不同的</li>
<li>ssh 需要通用 ssh key 的方式本地生成ssh key的公钥和私钥将公钥配置到gitserver。ex: github-setting-ssh key</li>
<li>https 每次push pull 都需要用户密码 用credential.helper 方式保存<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#window</div><div class="line">git config credential.helper=wincred</div><div class="line">#osx</div><div class="line">git config credential.helper=osxkeychain</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p>— git 不同的登录方式ssh https 配置区别还是需要注意</p>
]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js对象概念]]></title>
      <url>/2017/08/28/js-base/</url>
      <content type="html"><![CDATA[<h1 id="js对象"><a href="#js对象" class="headerlink" title="js对象"></a>js对象</h1><h3 id="this-对象"><a href="#this-对象" class="headerlink" title="this 对象"></a>this 对象</h3><blockquote>
<p>this 指向和调用方式有关 函数调用  对象方法   new表达式</p>
</blockquote>
<ul>
<li>==普通函数调用==，this为==全局对象或是undefined==</li>
<li>==作为对象的方法==，this为==那个对象==</li>
<li>new 表达式，this为以该函数为原型的新创建的对象</li>
<li>使用 apply/call指定 this  这里this的指向根据函数的上下文</li>
<li>用bind绑定固定的this</li>
<li>事件处理函数中的this是当前的触发事件的DOM元素(event.currentTarget) </li>
<li><a href="http://zonxin.github.io/post/2015/11/javascript-this" target="_blank" rel="external">IE attachEvent添加的事件处理函数中this为window</a></li>
</ul>
<hr>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>1.函数声明和 函数表达式 区别</p>
<ul>
<li>在解释器 加载数据时候  有一个函数声明提升 function declaration hoisting</li>
<li>函数声明在任何代码之前可用</li>
<li>函数表达式必须等到解析器执行到它所在的代码行</li>
</ul>
<p>2.函数调用的三种方式:</p>
<ul>
<li>obj.myFunc();</li>
<li>myFunc.call(obj,arg);</li>
<li>myFunc.apply(obj,[arg1,arg2..]); </li>
<li>call 连续参数  apply  接受 array arguments</li>
<li>fun.call(thisArg[, arg1[, arg2[, …]]])</li>
<li>fun.apply(thisArg, [argsArray])</li>
<li><a href="https://segmentfault.com/a/1190000000725712" target="_blank" rel="external">参考文档</a> </li>
</ul>
<p>3.构造函数：</p>
<blockquote>
<p>这个新创建的对象的 prototype 被指向到构造函数的 prototype。</p>
</blockquote>
<ul>
<li>通过 new 关键字方式调用的函数都被认为是构造函数。 </li>
<li>在构造函数内部</li>
<li>也就是被调用的函数内</li>
<li>this 指向新创建的对象 Object。 </li>
</ul>
<p>4.原型对象</p>
<ul>
<li>原型对象：有 constructor 指针指向构造函数. 是不安全属性容易被重写！</li>
<li>实例：指向原型对象的内部指针 [proto ]. constructor 属性默认调用prototype对象的constructor.</li>
<li>All objects inherit a constructor property from their prototype:</li>
</ul>
<hr>
<h3 id="arguments对象"><a href="#arguments对象" class="headerlink" title="arguments对象"></a>arguments对象</h3><ol>
<li>转换成数组</li>
<li>var args = Array.prototype.silce.call(arguments);</li>
<li>callee 属性  指向拥有arguments对象的函数</li>
</ol>
<hr>
<h3 id="object-对象"><a href="#object-对象" class="headerlink" title="object 对象"></a>object 对象</h3><p>1.Object.defineProperty() 参数 对象，属性，描述符（descriptor）<br>descriptor: configurable emumerable writable value 中一个或多个。</p>
<ul>
<li>configurable    true 可以从对象属性删除 false 不能从对象属性删除 delete会报错</li>
<li>emumerable </li>
<li>writable        true 可读写， flase  只读</li>
<li>value           属性的值</li>
</ul>
<hr>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git]]></title>
      <url>/2017/08/28/git-base/</url>
      <content type="html"><![CDATA[<h2 id="Git实践"><a href="#Git实践" class="headerlink" title="Git实践"></a>Git实践</h2><ul>
<li><p>Git 有三种状态</p>
<ul>
<li>已提交（committed）</li>
<li>已修改（modified）</li>
<li>已暂存（staged）</li>
</ul>
</li>
<li><p>Git global setup:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name <span class="string">"username"</span></div><div class="line">git config --global user.email <span class="string">"username@baidu.cn"</span></div></pre></td></tr></table></figure>
</li>
<li><p>Create Repository</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git init</div><div class="line">git config user.name <span class="string">"username"</span></div><div class="line">git config credential.helper wincred <span class="comment">//Caching password in git </span></div><div class="line">git remote add origin https:<span class="comment">//git.corp.qihoo.net/kidsguard-web/elder.git</span></div></pre></td></tr></table></figure>
</li>
<li><p>delete remote branch</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin --<span class="keyword">delete</span> branchName</div></pre></td></tr></table></figure>
</li>
<li><p>GIT关键字</p>
<ul>
<li>pull  拉取远程的repo 仓库内容</li>
<li>fetch   </li>
<li>push    将修改推送到远程的仓库</li>
<li>checkout 切换分支</li>
<li>branch test 创建test 分支</li>
<li>rebase   修改master指针的位置，使得本branch上面的提交都在最新master之后保持提交树的线性关系。</li>
<li>add 这个命令理解为“添加内容到下一次提交中”而不是“将一个文件添加到项目中”要更加合适。</li>
<li>reset SHA 会保留工作目录（working directory）。这些提交虽然消失了，但是内容还在磁盘上</li>
<li>reset –hard SHA “撤销”所有提交和本地修改 (-hard不保留本地磁盘数据)</li>
</ul>
</li>
</ul>
<h4 id="pull-amp-push-push-类似"><a href="#pull-amp-push-push-类似" class="headerlink" title="pull &amp; push (push 类似)"></a>pull &amp; push (push 类似)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git pull &lt;远程主机名&gt;&lt;远程分支名&gt;:&lt;本地分支名&gt;</div><div class="line">git pull origin next:master     //origin主机的next分支，与本地的master分支合并。</div><div class="line">git pull origin next            //远程分支是与当前分支合并</div></pre></td></tr></table></figure>
<h4 id="reset"><a href="#reset" class="headerlink" title="reset"></a>reset</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git reset -soft head~ 回滚到前一次提交之前</div><div class="line">git reset --hard HEAD~~  回滚到前一次提交</div><div class="line">git reset --hard &lt;commit ID号&gt;</div><div class="line">git push -f 回滚远程提交的</div></pre></td></tr></table></figure>
<h4 id="checkout"><a href="#checkout" class="headerlink" title="checkout"></a>checkout</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git checkout -b  newtest  本地新建一个名为newtest的分支</div><div class="line">git checkout -b  localtest  origin/test  创建branch为localtest,repo为origin/test.</div><div class="line">git branch -u origin/my_branch  change upstream 的分支</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>参数文档<ul>
<li><a href="http://backlogtool.com/git-guide/cn" target="_blank" rel="external">Git猴子入门参考文档</a></li>
<li><a href="http://fe.iwjw.com/git-ji-ben-ming-ling/" target="_blank" rel="external">GIT 特性和基本命令 基于快照</a></li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[gulp常用插件]]></title>
      <url>/2017/08/28/gulp-plugins/</url>
      <content type="html"><![CDATA[<h5 id="gulp-load-plugins"><a href="#gulp-load-plugins" class="headerlink" title="gulp-load-plugins"></a>gulp-load-plugins</h5><blockquote>
<p>将所有gulp开头的文件load，</p>
</blockquote>
<h5 id="require-“gulp-load-plugins”"><a href="#require-“gulp-load-plugins”" class="headerlink" title="$=require(“gulp-load-plugins”),"></a>$=require(“gulp-load-plugins”),</h5><blockquote>
<p>通过$访问gulp相关的插件。</p>
</blockquote>
<h5 id="gulp-load-plugins-1"><a href="#gulp-load-plugins-1" class="headerlink" title="gulp-load-plugins"></a>gulp-load-plugins</h5><blockquote>
<p>这个插件能自动帮你加载package.json文件里的gulp插件。例如假设你的package.json文件里的依赖是这样的:也就是原始插件名去掉gulp-前缀，之后再转换为驼峰命名。</p>
</blockquote>
<h5 id="gulp-jade"><a href="#gulp-jade" class="headerlink" title="gulp-jade"></a>gulp-jade</h5><blockquote>
<p>编辑jade</p>
</blockquote>
<h5 id="gulp-less"><a href="#gulp-less" class="headerlink" title="gulp-less"></a>gulp-less</h5><blockquote>
<p> 编辑less 文件</p>
</blockquote>
<h5 id="gulp-flatten"><a href="#gulp-flatten" class="headerlink" title="gulp-flatten"></a>gulp-flatten</h5><blockquote>
<p>平面任意嵌套的数组，化成非数组项的非嵌套列表</p>
</blockquote>
<h5 id="gulp-plumber"><a href="#gulp-plumber" class="headerlink" title="gulp-plumber"></a>gulp-plumber</h5><blockquote>
<p>Prevent pipe breaking caused by errors from gulp plugins</p>
</blockquote>
<h5 id="gulp-uglify"><a href="#gulp-uglify" class="headerlink" title="gulp-uglify"></a>gulp-uglify</h5><blockquote>
<p>插件用来压缩js文件。</p>
</blockquote>
<h5 id="gulp-minify-css"><a href="#gulp-minify-css" class="headerlink" title="gulp-minify-css"></a>gulp-minify-css</h5><blockquote>
<p>插件用来压缩css文件。</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> gulp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[柯里化]]></title>
      <url>/2017/08/28/js-curry/</url>
      <content type="html"><![CDATA[<h3 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h3><ul>
<li>延时计算</li>
<li>通用写法<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">var currying = function (fn) &#123;</div><div class="line">    var _args = [];</div><div class="line">    function base() &#123;</div><div class="line">        if (arguments.length === 0) &#123;</div><div class="line">            return fn.apply(this, _args);</div><div class="line">        &#125; else &#123;</div><div class="line">            Array.prototype.push.apply(_args, [].slice.call(arguments));</div><div class="line">            return logic;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return base;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">var add = currying(function()&#123;</div><div class="line">    return [].slice.call(arguments).reduce(function(a,b)&#123;</div><div class="line">       return a + b;</div><div class="line">    &#125;);</div><div class="line">&#125;)</div><div class="line"></div><div class="line">add(1,2,3)(4)(5)();</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[移动端设计知识库]]></title>
      <url>/2017/08/28/design/</url>
      <content type="html"><![CDATA[<h1 id="移动端设计知识库"><a href="#移动端设计知识库" class="headerlink" title="移动端设计知识库"></a>移动端设计知识库</h1><h3 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h3><hr>
<h3 id="px：physical-pixel"><a href="#px：physical-pixel" class="headerlink" title="px：physical pixel"></a>px：physical pixel</h3><blockquote>
<p>设备能控制显示的最小单位，我们可以把这些像素看作成显示器上一个个的点。</p>
<h3 id="css-px"><a href="#css-px" class="headerlink" title="css px"></a>css px</h3><p>CSS像素是Web编程的概念，独立于设备的用于逻辑上衡量像素的单位，也就是说我在做网页时用到的CSS像素单位，是抽象的，而不是实际存在的。</p>
<h3 id="pt-point，点，"><a href="#pt-point，点，" class="headerlink" title="pt: point，点，"></a>pt: point，点，</h3><p>印刷行业常用单位，等于1/72英寸</p>
<h3 id="dip-设备独立像素"><a href="#dip-设备独立像素" class="headerlink" title="dip 设备独立像素"></a>dip 设备独立像素</h3><p> (DIP，device-independent pixel，density-independent pixel)(也叫密度无关像素)，可以认为是计算机坐标系统中得一个点，这个点代表一个可以由程序使用并控制的虚拟像素(比如：CSS 像素,只是在android机中CSS 像素就不叫”CSS 像素”了而是叫”设备独立像素”)， 然后由相关系统转换为物理像素。</p>
<blockquote>
<p>dip或dp，是安卓开发用的单位</p>
</blockquote>
</blockquote>
<h2 id="比较单位"><a href="#比较单位" class="headerlink" title="比较单位"></a>比较单位</h2><h3 id="DPI-点每英寸"><a href="#DPI-点每英寸" class="headerlink" title="DPI 点每英寸"></a>DPI 点每英寸</h3><blockquote>
<p> dpi (dots per inch)： 打印分辨率 （每英寸所能打印的点数，即打印精度）</p>
<h3 id="PPI-像素每英寸"><a href="#PPI-像素每英寸" class="headerlink" title="PPI 像素每英寸"></a>PPI 像素每英寸</h3><p>ppi (pixels per inch)：图像分辨率 （在图像中，每英寸所包含的像素数目）</p>
<blockquote>
<p>  计算方法是通过勾股定理算出来对角线包含的像素点然后除以对角线的长度(英寸)得来的</p>
<ul>
<li>ppi和dpi经常都会出现混用现象。但是他们所用的领域也存在区别。从技术角度说，“像素”只存在于电脑显示领域，而“点”只出现于打印或印刷领域。</li>
</ul>
</blockquote>
</blockquote>
<h2 id="PPI-参数数据"><a href="#PPI-参数数据" class="headerlink" title="PPI 参数数据"></a>PPI 参数数据</h2><h3 id="安卓端-PPI-参数"><a href="#安卓端-PPI-参数" class="headerlink" title="安卓端 PPI 参数"></a>安卓端 PPI 参数</h3><p><img src="https://p3.ssl.qhimg.com/t0136463ffdc083f527.jpg" alt="image"></p>
<h3 id="苹果设备-PPI-参数"><a href="#苹果设备-PPI-参数" class="headerlink" title="苹果设备 PPI 参数"></a>苹果设备 PPI 参数</h3><p><img src="https://p2.ssl.qhimg.com/t01ea8b64b8834a6092.png" alt="image"></p>
<blockquote>
<p>思考</p>
<ol>
<li>PS中的分辨率/寸指的是什么？</li>
<li>做web设计的时候通常设置为72 ？</li>
<li>做图片输出的时候通常设置为300 ？</li>
<li>苹果鼓吹的retina又是什么呢？1080p 4k 等概念？</li>
<li>分辨率 分为显示分辨率 和 图片分辨率 分别指什么？<br>独立完成思考题，恭喜你 完成本课程学习！</li>
</ol>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> design </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[viewport适口]]></title>
      <url>/2017/04/28/html-view/</url>
      <content type="html"><![CDATA[<ul>
<li>手机屏幕相对着桌面浏览器小，传统网页的设计在手机上体验糟糕<br>Apple 在移动版 Safari 中定义了 viewport meta 标签(如果没记错最早提出的话)，用于创建一个虚拟窗口（layout viewport），这个虚拟窗口的分辨率接近于桌面显示器，Apple 将其定义为980px。然后将虚拟窗口映射到移动设备的屏幕上，按比例缩放并重新渲染网页。</li>
</ul>
<h3 id="虚拟窗口（layout-viewport）"><a href="#虚拟窗口（layout-viewport）" class="headerlink" title="虚拟窗口（layout viewport）"></a>虚拟窗口（layout viewport）</h3><ul>
<li>把 viewport 设置为一个比较宽的值（防止太窄而在可视区域中显示错乱）。该默认的 viewport 称为 layout viewport。<br>宽度可通过 Js 获取(基本所有设备都支持)</li>
</ul>
<h3 id="视觉窗口（visual-viewport）"><a href="#视觉窗口（visual-viewport）" class="headerlink" title="视觉窗口（visual viewport）"></a>视觉窗口（visual viewport）</h3><ul>
<li>浏览器可视区域大小。可理解为手机物理屏幕。<br>宽度可通过 Js 获取(不支持Android2, Opera Mini, UC8)</li>
</ul>
<hr>
<pre><code>window.innerWidth
window.innerHeight
</code></pre><hr>
<h3 id="ideal-viewport"><a href="#ideal-viewport" class="headerlink" title="ideal viewport"></a>ideal viewport</h3><ul>
<li>由Peter-Paul Koch提出的一种概念，一个完美适配移动设备的 viewport。理想状态是不需要用户缩放和横向滚动条就能正常查看，显示的文字大小合适，不区分分辨率，屏幕密度等。</li>
</ul>
<hr>
<pre><code>&lt;meta name=&quot;viewport&quot;content=&quot;width=device-width,initial-scale=1.0,maximum-scale=1.0, user-scalable=0&quot;&gt;
</code></pre><hr>
<h3 id="meta-viewport"><a href="#meta-viewport" class="headerlink" title="meta viewport"></a>meta viewport</h3><ul>
<li>移动端默认使用的是 layout viewport ，而我们想要达到类似 ideal viewport 的效果的话，可以通过 meta 标签来对 viewport 进行控制。</li>
</ul>
<h3 id="width-device-width"><a href="#width-device-width" class="headerlink" title="width=device-width"></a>width=device-width</h3><ul>
<li><p>因为meta viewport中的width能控制layout viewport的宽度，所以我们只需要把width设为width-device这个特殊的值就行了。</p>
</li>
<li><p>设备像素比 = 设备像素/设备独立像素 </p>
</li>
<li><p>设备独立像素 =  设备像素/设备像素比</p>
</li>
<li><p>独立设备像素 就是 css 中的px  独立于设备的用于逻辑上衡量像素的单位。</p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> viewport </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
